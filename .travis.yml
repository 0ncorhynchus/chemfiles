language: cpp

sudo: false

os:
  - linux
  - osx

compiler:
  - gcc
  - clang

env:
  global:
    secure: Mf7f3PP+AHqyOMEp9koj+mTBSVfo03XNFLJ6offmH3IWIj+N5fxwn+tN3H/hKUeL8mvzfHjXPAkYkWKVwcamoQ9ktoYLDJ83HCa4muCUxENz/SAR2DvWf8ix7ggvIP8wZCrNyq8ssw+5F1FRmauF7HjTDPCtBiz/sjvK94XVwXU=
    secure: vemv2pi+y10L/3QkiDTdgbsug2Qv97OUiMjyRw9pYIjDoNhws1jzuKMFJt1YvUNZcROUA1hEkDYDDCmGTXAo7zr+pk+ru9e8h6q9LH+uPZWKgWHUzEyFlLB3wve3fCzeTIqvvSC+87bxYhJg53TrrCyRXBu3jnHoqJKr2RhWwOQ=

addons:
  apt:
    sources:
    - ubuntu-toolchain-r-test
    - llvm-toolchain-precise-3.6
    packages:
    - g++-4.9
    - gfortran-4.9
    - libnetcdf-dev
    - clang-3.6
    - python-numpy

install:
  - export C_COMPILER=$CC
  - |
    if [ ${TRAVIS_OS_NAME} == "linux" && ${C_COMPILER} == "gcc" ]
    then
        export DO_COVERAGE=1
    fi
  # Setting environement
  - export CMAKE_ARGS="-DCMAKE_BUILD_TYPE=debug -DBUILD_TESTS=ON -DFORTRAN_BINDING=ON"
  # Install code coverage stuff
  - |
    if [ ${DO_COVERAGE} == 1 ]
    then
        gem install coveralls-lcov
        wget http://ftp.de.debian.org/debian/pool/main/l/lcov/lcov_1.11.orig.tar.gz
        tar xf lcov_1.11.orig.tar.gz
        export LCOV='./../lcov-1.11/bin/lcov'
        export CMAKE_ARGS="$CMAKE_ARGS -DCODE_COVERAGE=ON"
    fi
  # Install Linux stuff
  - |
    if [ ${TRAVIS_OS_NAME} == "linux" ]
    then
        wget http://www.cmake.org/files/v3.2/cmake-3.2.1-Linux-x86_64.sh
        mkdir -p build
        sh cmake-3.2.1-Linux-x86_64.sh --prefix=build --exclude-subdir
        export CMAKE=$(pwd)/build/bin/cmake
        export FC=gfortran-4.9
        if [ ${C_COMPILER} == "gcc" ]
        then
            export CC=gcc-4.9
            export CXX=g++-4.9
        elif [ ${C_COMPILER} == "clang" ]
        then
            export CC=clang-3.6
            export CXX=clang++-3.6
        fi
    fi
  # Install OS X stuff
  - |
    if [ ${TRAVIS_OS_NAME} == "osx" ]
    then
        brew tap homebrew/science
        brew tap homebrew/python
        brew update
        brew install netcdf numpy gcc
        export CMAKE=cmake
        export FC=gfortran-5
        if [ ${C_COMPILER} == "gcc" ]
        then
            export CC=gcc-5
            export CXX=g++-5
        elif [ ${C_COMPILER} == "clang" ]
        then
            export CC=clang
            export CXX=clang++
        fi
    fi
  - pip install --user enum34
  - $FC --version

before_script:
  - cd ${TRAVIS_BUILD_DIR}
  - mkdir -p build
  - cd build
  - $CMAKE $CMAKE_ARGS ..
  # Cleanup of the coverage data
  - |
    if [ ${DO_COVERAGE} == 1 ]
    then
        ${LCOV} --directory $(pwd) --zerocounters
    fi

script:
  - cd ${TRAVIS_BUILD_DIR}/build
  - make
  - ctest --output-on-failure

deploy:
  provider: script
  script: bash ${TRAVIS_BUILD_DIR}/scripts/conda-recipe/deploy.sh
  on:
    condition: (${C_COMPILER} == "gcc" && ${TRAVIS_OS_NAME} == "linux") || (${C_COMPILER} == "clang" && ${TRAVIS_OS_NAME} == "osx")
    tags: true

after_success:
  - cd ${TRAVIS_BUILD_DIR}/build
  # Parse and submit coverage data
  - |
    if [ ${DO_COVERAGE} == 1 ]
    then
        ${LCOV} --gcov-tool gcov-4.9 --directory $(pwd) --capture --output-file coverage.info
        ${LCOV} --remove coverage.info 'tests/*' 'Chemharp/build/*' '/usr/*' --output-file coverage.info
        ${LCOV} --list coverage.info
        coveralls-lcov --repo-token=${COVERALLS_TOKEN} coverage.info
    fi
